#!/usr/bin/env python

# Helps you view/edit the current selection in vi/vim/gvim/vimx/...
# Creates a temporary file, pastes the selection/clipboard in that file
# and fires up vi. Note that the temporary file is deleted after vi is
# closed and that the modified selection/clipboard is not (currently)
# pushed back to the selection/clipboard.

# Author: David McClosky
# Homepage: http://zorglish.org
# Code: http://github.com/dmcc

import subprocess
import tempfile
import time

def edit_selection(mode, registers, vi_command, verbose=False):
    time_desc = time.strftime('%H.%M')
    prefix = '%s-%s-' % (mode, time_desc)
    with tempfile.NamedTemporaryFile(prefix=prefix) as f:
        if verbose:
            print 'tempfile:', f.name
        # start vim, ask it paste text from the appropriate register(s), and
        # save it to the temporary file. since it's a NamedTemporaryFile,
        # it will be erased afterwards.
        puts = []
        for register in registers:
            puts.extend(['-c', ":put %s" % register])
        full_command = [vi_command, '--nofork', '--servername', mode] + \
                        puts + ['-c', ":write! %s" % f.name]
        subprocess.call(full_command)

if __name__ == "__main__":
    import optparse
    parser = optparse.OptionParser(usage="%prog [selection|clipboard|both]")
    parser.add_option('-v', '--verbose', action='store_true',
                      help='Print more debugging information.')
    parser.add_option('-c', '--command', default='gvim',
                      help='Command to run for vi (default: gvim)')
    opts, args = parser.parse_args()
    if not len(args) == 1:
        parser.print_help()
        raise SystemExit

    mode = args[0].lower()
    if mode[0] == 's':
        mode = 'selection'
        registers = '*'
    elif mode[0] == 'c':
        mode = 'clipboard'
        registers = '+'
    elif mode[0] == 'b':
        mode = 'bothclipboards'
        registers = ['+', '*']
    else:
        parser.print_help()
        raise SystemExit

    edit_selection(mode, registers, opts.command, opts.verbose)
