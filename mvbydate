#!/usr/bin/env python

# move by date -- a way of reorganizing files by their date stamp

# Author: David McClosky
# Homepage: http://zorglish.org
# Code: http://github.com/dmcc

# vi: syntax=python

import os
import time
from optparse import OptionParser
from pathlib import Path
from waterworks.Files import mkdirparents

parser = OptionParser()
parser.add_option("-k", "--dry-run", action='store_true',
                  help="Don't actually move any files, just print the "
                       "commands to do so.")
parser.add_option("-f", "--format", default='%Y.%m.%d', metavar="FMT",
                  help="A format string appropriate for time.strftime "
                       "(default '%Y.%m.%d' results in YYYY.MM.DD)")
parser.add_option("-t", "--timestamp", default='mtime',
                  choices=['ctime', 'mtime', 'atime'],
                  help="Which timestamp to use (ctime, mtime, or atime)")

(options, args) = parser.parse_args()

for filename in args:
    filename = Path(filename)
    if filename.is_dir():
        print("Skipping directory:", filename)
        continue
    timestamp = getattr(os.path, 'get' + options.timestamp)(filename)
    new_dirname = time.strftime(options.format, time.localtime(timestamp))
    full_new_path = filename.parent/new_dirname/filename.name
    if not options.dry_run:
        mkdirparents(full_new_path.parent)

    # in case full_new_dirname already existed and had a file with the
    # same name in it
    if full_new_path.exists():
        raise ValueError("{} already has a {} in it".format(full_new_path.parent,
                         filename))

    print('mv', filename, full_new_path)
    if not options.dry_run:
        filename.rename(full_new_path)
